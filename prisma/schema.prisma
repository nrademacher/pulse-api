// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String    @id @default(cuid())
  name            String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  email           String    @unique
  passwordHash    String?
  verified        Boolean?
  role            UserRoles @default(SOFTWARE_DEVELOPER)
  cc              CC
  teams           Team[]    @relation(name: "TeamToUser")
  projectsOwned   Project[] @relation(name: "ProjectToUser")
  chatsSent       Chat[]    @relation(name: "ChatToSender")
  chatsReceived   Chat[]    @relation(name: "ChatToRecipient")
  displayName     String?
  bio             String?
  tasksAssignedBy Task[]    @relation(name: "AssignerToTask")
  tasksAssignedTo Task[]    @relation(name: "AssigneeToTask")

  @@map("users")
}

model Team {
  id          String    @id @default(cuid())
  users       User[]    @relation(name: "TeamToUser")
  name        String
  description String?
  projects    Project[] @relation(name: "ProjectToTeam")

  @@map("teams")
}

model Project {
  id      String  @id @default(cuid())
  owner   User    @relation(name: "ProjectToUser", fields: [ownerId], references: [id])
  ownerId String
  team    Team    @relation(name: "ProjectToTeam", fields: [teamId], references: [id])
  teamId  String
  boards  Board[] @relation(name: "BoardToProject")

  @@map("projects")
}

model Chat {
  id      String       @id @default(cuid())
  from    User         @relation(name: "ChatToSender", fields: [fromId], references: [id])
  fromId  String
  to      User?        @relation(name: "ChatToRecipient", fields: [toId], references: [id])
  toId    String?
  channel ChatChannels @default(ALL)
  message String

  @@map("chats")
}

model Board {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  lists     List[]   @relation(name: "BoardToList")
  project   Project  @relation(name: "BoardToProject", fields: [projectId], references: [id])
  projectId String

  @@map("boards")
}

model List {
  id        String   @id @default(cuid())
  board     Board    @relation(name: "BoardToList", fields: [boardId], references: [id])
  boardId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  tasks     Task[]   @relation(name: "ListToTask")

  @@map("lists")
}

model Task {
  id          String         @id @default(cuid())
  list        List           @relation(name: "ListToTask", fields: [listId], references: [id])
  listId      String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  assignerId  String
  assigneeId  String
  assigner    User           @relation(name: "AssignerToTask", fields: [assignerId], references: [id])
  assignee    User           @relation(name: "AssigneeToTask", fields: [assigneeId], references: [id])
  title       String
  description String?
  priority    TaskPriorities @default(NORMAL)
  done        Boolean

  @@map("tasks")
}

enum UserRoles {
  ADMIN
  PRODUCT_OWNER
  PROJECT_MANAGER
  TECHNICAL_LEAD
  SOFTWARE_DEVELOPER
}

enum CC {
  IOT
  CES
  ADV_ENG
}

enum TaskPriorities {
  LOW
  NORMAL
  HIGH
  EMERGENCY
}

enum ChatChannels {
  ALL
  ADV_ENG
  CES
  IOT
  PRIVATE
}
